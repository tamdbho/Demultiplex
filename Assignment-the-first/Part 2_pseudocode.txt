Create reverse_complement function:
    flip the entire string
    replaces "A" to "T", "T" to "A", "G" to "C", "C" to "G"
    
Create some line counting variable:
    matched_count = 0
    index_hop_count = 0
    unknown_count = 0
Store all indexes from indexes.txt in a set
Open R1.fq, R2.fq, R3.fq, R4.fq and read line by line:
    While True:
        header = line 1
        sequence = line 2
        comment = line 3
        quality = line 4

        for sequence line in R2.fq and sequence line in R3.fq:
            call reverse_complement function for seq_line_R3
            if seq_line_R2 or reverserd_seq_line_R3 NOT in index set:
                write record (header+seq_line_R2+reverserd_seq_line_R3, sequence , + , quality) in R1.fq into unknown_R1.fq
                write record (header+seq_line_R2+reverserd_seq_line_R3, sequence , + , quality) in R4.fq into unknown_R4.fq
                unknown_count += 1
            else:
                if seq_line_R2 == reverserd_seq_line_R3:
                    write record (header+seq_line_R2+reverserd_seq_line_R3, sequence , comment , quality) in R1.fq into matched_R1.fq
                    write record (header+seq_line_R2+reverserd_seq_line_R3, sequence , + , quality) in R4.fq into matched_R4.fq
                    matched_count += 1
                else:
                    write record (header+seq_line_R2+reverserd_seq_line_R3, sequence , + , quality) in R1.fq into index.hopped_R1.fq
                    write record (header+seq_line_R2+reverserd_seq_line_R3, sequence , + , quality) in R4.fq into index.hopped_R4.fq
                    index_hop_count += 1
        continue looping through records

Report
matched_count = the number of read-pairs with properly matched indexes,
index_hop_count = the number of read pairs with index-hopping observed
unknown_count = the number of read-pairs with unknown index(es).
